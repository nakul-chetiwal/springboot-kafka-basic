# for now we have only one broker which is running on localhost:9092. To configure multiple brokers just separate them with commas
spring.kafka.consumer.bootstrap-servers: localhost:9092
spring.kafka.consumer.group-id: myGroup
# below code reset the offset to earliest offset
spring.kafka.consumer.auto-offset-reset: earliest


# below 2 lines are used to deserialize the key and value. StringDeserializer is a class in apache kafka library
spring.kafka.consumer.key-deserializer= org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
# above line is commented because it does not deserialize the json object to Java object
#spring.kafka.consumer.value-deserializer= org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
#through below line kafka comsumer will deserialize  from above package
spring.kafka.consumer.properties.spring.json.trusted.packages=*

spring.kafka.producer.bootstrap-servers: localhost:9092
# below 2 lines are used to deserialize the key and value. StringSerializer is a class in apache kafka library
spring.kafka.producer.key-serializer: org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer: org.apache.kafka.common.serialization.StringSerializer
# above line is commented because it does not serialize Java object to json object
spring.kafka.producer.value-serializer= org.springframework.kafka.support.serializer.JsonSerializer
